// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"subway_intro/internal"
	"subway_intro/internal/biz"
	"subway_intro/internal/data"
	"subway_intro/internal/rpc"
	"subway_intro/internal/server"
	"subway_intro/internal/service"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

func initApp(configPath string, ctx context.Context) (*kratos.App, func(), error) {
	bootstrap, err := internal.NewConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	logger := internal.NewLogger(bootstrap)
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo)
	rpcClient := rpc.NewClient(ctx)
	userService := service.NewUserService(userUsecase, rpcClient)
	httpServer := server.NewHTTPServer(bootstrap, userService, logger)
	grpcServer := server.NewGRPCServer(bootstrap, userService, logger)
	app := newApp(bootstrap, logger, httpServer, grpcServer, ctx)
	return app, func() {
		cleanup()
	}, nil
}
